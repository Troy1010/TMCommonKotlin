import com.tminus1010.tmcommonkotlin.Shared

plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'maven-publish'
}

android {
    compileSdk = Shared.targetSDK

    compileOptions.sourceCompatibility = JavaVersion.VERSION_1_8
    compileOptions.targetCompatibility = JavaVersion.VERSION_1_8
    kotlinOptions.jvmTarget = "1.8"

    defaultConfig {
        minSdkVersion(29)
        targetSdkVersion(Shared.targetSDK)
        versionCode = Shared.versionCode
        versionName = Shared.versionName
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    // # TMCommonKotlin
    implementation(project(":tmcommonkotlin-core"))
    implementation(project(":tmcommonkotlin-rx3"))
    implementation(project(":tmcommonkotlin-androidx"))
    // # Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.0"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.0"
    // ## Coroutine & Lifecycle
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.4.1"
    // ## Coroutines & Rx
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-rx3:1.6.0"
    // # Tesseract
    implementation 'cz.adaptech:tesseract4android:4.1.1'
}

tasks.register("sourceJar", Jar) {
    from("src/main")
}

afterEvaluate {
    publishing {
        publications {
            register("mavenPublication", MavenPublication) {
                artifact("$buildDir/outputs/aar/${artifactId}-release.aar")
                artifact(tasks.getByName("sourceJar")) { classifier = "sources" }
                groupId = Shared.groupId
                artifactId = "tmcommonkotlin-imagetotext"
                version = Shared.versionName
                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        def group = ""
                        if (it.group == "TMCommonKotlin")
                            group = Shared.groupId
                        else
                            group = it.group
                        dependencyNode.appendNode('groupId', group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}