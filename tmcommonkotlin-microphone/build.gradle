import com.tminus1010.tmcommonkotlin.Shared

plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id("maven-publish")
}

android {
    compileSdk 32

    defaultConfig {
        minSdk 26
        targetSdk 32

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()
    }
    namespace 'com.tminus1010.tmcommonkotlin.microphone'
}

// TODO: cleanup
dependencies {
    // # TMCommonKotlin
    implementation(project(":tmcommonkotlin-core"))
    implementation(project(":tmcommonkotlin-rx3"))
    implementation(project(":tmcommonkotlin-coroutines"))
    // # Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2-native-mt"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2-native-mt"
    // ## Coroutine & Lifecycle
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.4.0"
    // ## Coroutines & Rx
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-rx3:1.3.8"
    // # Protocol Buffers
    implementation "com.google.protobuf:protobuf-java:4.0.0-rc-2"
    // # Apache Commons
    implementation("commons-io:commons-io:2.8.0")
}

tasks.register("sourceJar", Jar) {
    from("src/main")
}

afterEvaluate {
    publishing {
        publications {
            register("mavenPublication", MavenPublication) {
                artifact bundleReleaseAar
                artifact sourceJar
                groupId = Shared.groupId
                artifactId = "tmcommonkotlin-microphone"
                version = rootProject.ext["versionName"]
                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        def group = ""
                        if (it.group == "TMCommonKotlin")
                            group = Shared.groupId
                        else
                            group = it.group
                        dependencyNode.appendNode('groupId', group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}